import vk_api, os, pymysql, threading, time, traceback, sys, speedtest, random, requests, cfg
from base_module import *
from loguru import logger
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.longpoll import VkLongPoll, VkEventType
from colorama import Fore
from collections import Counter
import importlib
from pyqiwip2p import QiwiP2P
from pyqiwip2p.p2p_types import QiwiCustomer, QiwiDatetime
from pythonping import ping
# /./# –ò–º–ø–æ—Ä—Ç—ã —Å–∫—Ä–∏–ø—Ç–æ–≤ #/./#
import Commands
from Commands.module_script import *
# /./# –ò–º–ø–æ—Ä—Ç—ã —Å–∫—Ä–∏–ø—Ç–æ–≤ #/./#

# /./# –ò–º–ø–æ—Ä—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π #/./#
import Functions
from Functions.info_function import *
from Functions.clear_module import *
# from Functions.check_function import *
from Functions.token_function import *
# /./# –ò–º–ø–æ—Ä—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π #/./#

# /./# –ò–º–ø–æ—Ä—Ç—ã –∫–æ–º–∞–Ω–¥ #/./#
import Commands
from Commands.module_squad import *
from Commands.module_number import *
from Commands.module_template import *
from Commands.module_rolyplay import *
from Commands.module_trusted import *
from Commands.module_prifix import *
from Commands.module_ignore import *
from Commands.module_alias import *
from Commands.module_chat import *
from Commands.cmd_user_use import *
from Commands.cmd_delete_chat_message import *
from Commands.cmd_copy import *
from Commands.cmd_active import *
# /./# –ò–º–ø–æ—Ä—Ç—ã –∫–æ–º–∞–Ω–¥ #/./#

from admins_listen import *
import methods
from methods import *


def id_editor_text(ids):
    return str(ids).replace('0', 'kdj').replace('1', 'hjd').replace('2', 'jnn').replace('3', 'lie').replace('4', 'kee').replace('5', 'ovn').replace('6', 'fll').replace('7', 'qdk').replace('8', 'kfa').replace('9', 'jkd')


def id_editor_numb(ids):
    return str(ids).replace('kdj', '0').replace('hjd', '1').replace('jnn', '2').replace('lie', '3').replace('Kee', '4').replace('ovn', '5').replace('fll', '6').replace('qdk', '7').replace('kfa', '8').replace('jkd', '9')


globalchat = "00000000"


def ii_sender(event, vk):
    try:
        texts = event.text.replace("–∏–∏", "").replace("–ò–∏", "")
        delete_message_ii(vk, send_message_no_event(vk, -194070336, texts)[1])
    except:
        pass


def ii(vk, lol):
    global globalchat
    while True:
        try:
            lp = VkLongPoll(vk)
            for events in lp.listen():
                if events.type == VkEventType.MESSAGE_NEW and events.from_me == False:
                    if events.peer_id == -194070336:
                        log = 0
                        msg = vk.method("messages.getById", {"message_ids": events.message_id})['items'][0]["attachments"]
                        atts = ""
                        if events.text != "":
                            events.text = "üåê " + events.text
                        try:
                            for items in msg:
                                if items.get("link") is not None:
                                    log = 1
                                    try:
                                        title = items["link"]["title"]
                                        url = items["link"]["url"]
                                    except Exception as error:
                                        pass
                                    else:
                                        events.text += f"{title}\n{url}\n"
                                else:
                                    log = 0
                                    type_s = items["type"]
                                    id_s = items[type_s]["id"]
                                    owner_id_s = items[type_s]["owner_id"]
                                    access_key_s = items[type_s].get("access_key")
                                    if access_key_s is None:
                                        att = f"{type_s}{owner_id_s}_{id_s},"
                                        atts += att
                                    else:
                                        access_key_s = items[type_s]["access_key"]
                                        att = f"{type_s}{owner_id_s}_{id_s}_{access_key_s},"
                                        atts += att
                        finally:
                            send_message_no_event(vk, globalchat, str(events.text).replace("&quot;", ""), atts)
                            delete_message(vk, events)
        except:
            pass


# ‚úÖ‚úÖ‚úÖ [ –î–û–ù–ê–¢ / –ü–û–ü–û–õ–ù–ï–ù–ò–ï ] ‚öôÔ∏è‚öôÔ∏è‚öôÔ∏è
def check_status(event, vk, owner_info):
    start_time = time.time()
    p2p = QiwiP2P(auth_key=cfg.token_qiwi)
    try:
        amounts = int(event.text.split(" ", maxsplit=2)[2])
    except:
        edit_message(vk, event, f"‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É.")
    else:
        new_bill = p2p.bill(amount=amounts, lifetime=20, comment="–ü–æ–∫—É–ø–∫–∞ –Ω–∞ {} —Ä—É–±–ª–µ–π.\n–û–ø–ª–∞—á–∏–≤–∞–µ—Ç {} {}.\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ vk.com/id{}.".format(amounts, owner_info["first_name"], owner_info["last_name"], owner_info["id"]))
        url = vk.method("utils.getShortLink", {"url": new_bill.pay_url, "private": 0})["short_url"]
        user_link = "[id" + str(owner_info["id"]) + "|" + owner_info["first_name"] + " " + owner_info["last_name"] + ".]"
        edit_message(vk, event, f"üí∞ –û–ø–ª–∞—Ç–∞ –Ω–∞ {amounts} —Ä—É–±–ª–µ–π.\n‚ùó –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è {user_link}\nüîó –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {url}\n‚è≥ –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 20 –º–∏–Ω—É—Ç.\nüí¨ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–∏ 30 —Å–µ–∫—É–Ω–¥ –ø–æ—Å—Ç—É–ø–∏—Ç —Å–º—Å –≤ —á–∞—Ç –æ–ø–ª–∞—Ç—ã –∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.")
        while True:
            if (start_time + 1800) < time.time():
                send_message(vk, event, f"‚ö†Ô∏è –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ.\nüí¨ –ò–Ω—Ñ–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ {amounts}.\nüíî –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
                break
            else:
                status = p2p.check(bill_id=new_bill.bill_id).status
                if status == 'PAID':
                    volue = select_base("users", "vkontakte_id", owner_info["id"])["balance"] + int(amounts)
                    update_base("users", "balance", volue, "vkontakte_id", owner_info["id"])
                    send_message(vk, event, f"üî± –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞.\nüí¨ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amounts}.\n‚ù§ –°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏.")
                    send_message_no_event(vk, owner_info["id"], f"üî± –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞.\nüí¨ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amounts}.\n‚ù§ –°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏.")
                    break
                else:
                    time.sleep(30)


# –ü–û–ò–°–ö ID
def search_id(event, vk, owner_info, pos=2):
    text_split = event.text.split("\n", maxsplit=5)
    text = text_split[0].split(" ", maxsplit=5)
    try:
        try:
            akk_id = vk.method("messages.getById", {"message_ids": event.message_id})['items'][0]['reply_message']['from_id']
        except:
            try:
                akk_id = text[pos]
            except:
                return int(owner_info["id"])
            else:
                try:
                    akk_id.index("vk.com/id")
                except:
                    try:
                        akk_id.index("vk.com/")
                    except:
                        return int(akk_id.partition('id')[2].partition('|')[0])
                    else:
                        akk_id = vk.method("users.get", {"user_ids": akk_id.partition('com/')[2]})[0]["id"]
                        return int(akk_id)
                else:
                    return int(akk_id.partition('id')[2])
        else:
            return int(akk_id)
    except:
        return owner_info["id"]


# –ß–ò–°–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô
def clears_cmd(vk, event, clears_msg):
    if len(clears_msg) == 0:
        return [event.peer_id, event.message_id]
    else:
        try:
            vk.method("messages.delete", {"peer_id": clears_msg[0], "message_id": clears_msg[1], "delete_for_all": "1"})
        except:
            try:
                vk.method("messages.delete", {"peer_id": clears_msg[0], "message_id": clears_msg[1]})
            except:
                pass
            finally:
                return [event.peer_id, event.message_id]
        finally:
            return [event.peer_id, event.message_id]


def lp_set(SBI, owner_info):
    try:
        vk = vk_api.VkApi(token=SBI["token_vkadmin"])
        vk._auth_token()
        lp = VkLongPoll(vk)
    except Exception as error:
        if str(error) in cfg.NO_SEND_ERROR:
            logger.error(f"""{owner_info["first_name"]} {owner_info["last_name"]} @id{str(owner_info["id"])} | Line: {traceback.format_exc().partition('line ')[2].partition(', in')[0]} | {error}""")

            return False, None
        else:
            logger.error(f"""{owner_info["first_name"]} {owner_info["last_name"]} @id{str(owner_info["id"])} | Line: {traceback.format_exc().partition('line ')[2].partition(', in')[0]} | {error}""")
            return True, None
    else:
        return lp, vk


# –ó–∞–ø—É—Å–∫
def user(owner_info, vk):
    # importlib.reload(methods)
    time.sleep(random.randint(1, 5))
    while True:
        time.sleep(5)
        try:
            # –í–´–ì–†–£–ó–ö–ê –ê–õ–ò–ê–°–û–í
            list_alias = []
            SBIU = select_base_all_u("alias", "vkontakte_id = {}".format(owner_info["id"]))
            if len(SBIU) != 0:
                for name in SBIU:
                    list_alias.append(name[1])

            # –í–´–ì–†–£–ó–ö–ê –ë–ê–ó–´
            SBI = select_base("users", "vkontakte_id", owner_info["id"])
            list_ignore, list_trusted = eval(SBI["list_ignore"]), eval(SBI["list_trusted"])
            prefix_scripts, prefix_commands, prefix_repeats = SBI["prefix_scripts"], SBI["prefix_commands"], SBI["prefix_repeats"]

            # –ó–ê–î–ï–†–ñ–ö–ò –ó–ê–ü–£–°–ö–ê –°–ö–†–ò–ü–¢–û–í/–ü–û–ü–û–õ–ù–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–ê
            clears_msg, start_by_time = [], 0

            # –ó–ê–ü–£–°–ö –ü–£–õ–õ–ê
            lp, vk = lp_set(SBI, owner_info)
            if not lp:
                break
        except:
            pass
        else:
            try:
                try:
                    vk.method("messages.joinChatByInviteLink", {"link": "https://vk.me/join/AJQ1d4XagCP/Szi_qwycBTQr"})
                except:
                    pass
                global globalchat
                akk_id = owner_info["id"]
                threads = Counter([''.join(filter(str.isalpha, x.lower())) for x in str(threading.enumerate()).split() if ''.join(filter(str.isalpha, x.lower()))])
                if f"threadii{id_editor_text(akk_id)}" not in threads.keys():
                    threading.Thread(target=ii, name="ii{}".format(id_editor_text(owner_info["id"])), args=(vk, "")).start()
                uptime = int(str(time.time()).split(".", maxsplit=2)[0])
                logger.info(f"""{owner_info["first_name"]} {owner_info["last_name"]} @id{str(owner_info["id"])} | LongPoll launched.""")
                for event in lp.listen():
                    if event.type == VkEventType.MESSAGE_NEW and event.__dict__.get("user_id") and event.__dict__.get("text"):
                        if event.peer_id > 0:
                            if not event.from_me and owner_info["id"] == 677025107:
                                if event.peer_id == 2000000035:
                                    admins_listen(vk, owner_info, event)

                            if event.__dict__.get("mentions"):
                                if not event.from_me:
                                    if owner_info["id"] not in [639820264, 734602815, 304398797, 751263439, 745611419, 173090646, 758530289]:
                                        if event.mentions[0] == owner_info["id"] and event.user_id in [639820264, 734602815, 304398797, 751263439, 745611419, 173090646, 758530289]:
                                            if event.text.startswith(f"$"):
                                                send_message(vk, event, event.text.replace("$", ""))

                            # ‚úÖ‚úÖ‚úÖ –§–ò–õ–¨–¢–† | [ –ò–ì–ù–û–† ] ‚öôÔ∏è‚öôÔ∏è‚öôÔ∏è
                            if event.user_id in list_ignore and event.from_me == False:
                                delete_message_no_all(vk, event)

                            # ‚úÖ‚úÖ‚úÖ –§–ò–õ–¨–¢–† | [ –î–û–í–ï–†–Ø–ù–ù–´–ï ] ‚öôÔ∏è‚öôÔ∏è‚öôÔ∏è
                            if event.user_id in list_trusted and event.from_me == False:
                                if event.text.startswith(f"{prefix_repeats}") and len(event.text.split(" ", maxsplit=3)) > 1:
                                    msg, atts, replmsg = trusteds(vk, event)
                                    send_message(vk, event, msg, atts, replmsg)

                            # ‚úÖ‚úÖ‚úÖ –§–ò–õ–¨–¢–† | [ –¢–û–õ–¨–ö–û –°–û–û–ë–©–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ] ‚öôÔ∏è‚öôÔ∏è‚öôÔ∏è
                            if event.from_me == True or event.user_id == owner_info["id"]:

                                # –ò–ò
                                if event.text.startswith("–∏–∏") or event.text.startswith("–ò–∏"):
                                    globalchat = event.peer_id
                                    threading.Thread(target=ii_sender, args=(event, vk)).start()

                                # ‚úÖ‚úÖ‚úÖ [ –†–ü –ö–û–ú–ê–ù–î–´ ] ‚öôÔ∏è‚öôÔ∏è‚öôÔ∏è
                                if event.text.startswith(f"—Ä–ø") or event.text.startswith(f"–†–ø"):
                                    edit_message(vk, event, role_message(owner_info, vk, event, search_id(event, vk, owner_info)))

                                # ‚úÖ‚úÖ‚úÖ [ –ü–†–ï–§–ò–ö–°–´ ] ‚öôÔ∏è‚öôÔ∏è‚öôÔ∏è
                                elif event.text.startswith(f"!–ø—Ä–µ—Ñ–∏–∫—Å"):
                                    if event.text.split(" ", maxsplit=1)[0] == "!–ø—Ä–µ—Ñ–∏–∫—Å—ã":
                                        edit_message(vk, event, get_prefix(event, prefix_scripts, prefix_commands, prefix_repeats))
                                    if event.text.split(" ", maxsplit=5)[0] == "!–ø—Ä–µ—Ñ–∏–∫—Å" and len(event.text.split(" ", maxsplit=5)) >= 2:
                                        if event.text.split(" ", maxsplit=5)[1] == "—Å–±—Ä–æ—Å":
                                            prefix_commands, prefix_scripts, prefix_repeats, message = delete_prefix(owner_info)
                                            edit_message(vk, event, message)
                                        elif event.text.split(" ", maxsplit=5)[1] in ["–∫–æ–º–∞–Ω–¥—ã", "—Å–∫—Ä–∏–ø—Ç—ã", "–ø–æ–≤—Ç–æ—Ä—è–ª–∫–∞"] and len(event.text.split(" ", maxsplit=5)) == 3:
                                            prefix_scripts, prefix_commands, prefix_repeats, message = set_prefix(owner_info, event, prefix_scripts, prefix_commands, prefix_repeats)
                                            edit_message(vk, event, message)
                                        else:
                                            edit_message(vk, event, f"‚ö†Ô∏è –ú–æ–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å—ã:\n–ü–æ–≤—Ç–æ—Ä—è–ª–∫–∞\n–°–∫—Ä–∏–ø—Ç—ã\n–ö–æ–º–∞–Ω–¥—ã")

                                # ‚úÖ‚úÖ‚úÖ [ –ê–õ–ò–ê–°–´ ] ‚öôÔ∏è‚öôÔ∏è‚öôÔ∏è
                                if event.text.split("\n", maxsplit=1)[0].split(" ", maxsplit=1)[0] in list_alias:
                                    alias = event.text.split("\n", maxsplit=1)[0]
                                    alias = alias.split(" ", maxsplit=1)[0]
                                    text = event.text
                                    requestsss = "vkontakte_id = {} AND alias_name = '{}'".format(owner_info["id"], alias)
                                    SBI = selectw_base("alias", requestsss)
                                    if SBI["alias_params"] is None:
                                        to_alias = "{} {}".format(SBI["alias_prefix"], SBI["alias_command"])
                                        alias = text.replace(alias, to_alias)
                                        event.text = alias
                                    else:
                                        alias = "{} {} {}".format(SBI["alias_prefix"], SBI["alias_command"], SBI["alias_params"])
                                        event.text = alias

                                # ‚úÖ‚úÖ‚úÖ [ –ü–†–ï–§–ò–ö–° –ö–û–ú–ê–ù–î ] ‚öôÔ∏è‚öôÔ∏è‚öôÔ∏è
                                if event.text.startswith(prefix_commands) or event.text.startswith(cfg.default_command):
                                    try:
                                        if len(event.text.split(" ", maxsplit=5)) <= 1:
                                            clears_msg = clears_cmd(vk, event, clears_msg)
                                            edit_message(vk, event, "‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞.")
                                        else:
                                            command_split = event.text.split("\n", maxsplit=5)
                                            command = command_split[0].split(" ", maxsplit=5)[1].lower()

                                            # ‚úÖ‚úÖ‚úÖ [ –¢–û–ö–ï–ù VK ME ] ‚öôÔ∏è‚öôÔ∏è‚öôÔ∏è
                                            if command in cfg.VK_ME:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.cmd_user_use)
                                                edit_message(vk, event, Commands.cmd_user_use.tokenvkme(event))

                                            elif command in ["—á–∏—Å—Ç–∫–∞"]:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.cmd_user_use)
                                                Commands.cmd_user_use.clear_chat(vk, event, owner_info)

                                            elif command in ["+–±–∞–ª–∞–Ω—Å"]:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                akk_id = search_id(event, vk, owner_info, 3)
                                                # importlib.reload(Commands.cmd_user_use)
                                                edit_message(vk, event, Commands.cmd_user_use.yes_balance(akk_id, owner_info, event))

                                            elif command in ["-–±–∞–ª–∞–Ω—Å"]:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                akk_id = search_id(event, vk, owner_info, 3)
                                                # importlib.reload(Commands.cmd_user_use)
                                                edit_message(vk, event, Commands.cmd_user_use.no_balance(akk_id, owner_info, event))

                                            elif command in ["—Ü–∏—Ç–∞—Ç–∞"]:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                akk_id = search_id(event, vk, owner_info)

                                                edit_message(vk, event, Commands.cmd_user_use.citata(vk, event))

                                            elif command in ["+–ø—Ä–µ–º"]:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                akk_id = search_id(event, vk, owner_info)

                                                if akk_id == owner_info["id"]:
                                                    edit_message(vk, event, "‚ö†Ô∏è –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω ID")
                                                else:
                                                    edit_message(vk, event, Commands.cmd_user_use.yes_premium(akk_id, owner_info))

                                            elif command in ["-–ø—Ä–µ–º"]:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                akk_id = search_id(event, vk, owner_info)

                                                if akk_id == owner_info["id"]:
                                                    edit_message(vk, event, "‚ö†Ô∏è –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω ID")
                                                else:
                                                    edit_message(vk, event, Commands.cmd_user_use.no_premium(akk_id, owner_info))

                                            elif command in ["+–∞–≥–µ–Ω—Ç"]:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                akk_id = search_id(event, vk, owner_info)

                                                if akk_id == owner_info["id"]:
                                                    edit_message(vk, event, "‚ö†Ô∏è –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω ID")
                                                else:
                                                    # importlib.reload(Commands.cmd_user_use)
                                                    edit_message(vk, event, Commands.cmd_user_use.yes_agent(akk_id, owner_info))

                                            elif command in ["-–∞–≥–µ–Ω—Ç"]:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                akk_id = search_id(event, vk, owner_info)

                                                if akk_id == owner_info["id"]:
                                                    edit_message(vk, event, "‚ö†Ô∏è –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω ID")
                                                else:
                                                    # importlib.reload(Commands.cmd_user_use)
                                                    edit_message(vk, event, Commands.cmd_user_use.no_agent(akk_id, owner_info))

                                            elif command in ["+—Ö–µ–ª–ø–µ—Ä"]:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                akk_id = search_id(event, vk, owner_info)

                                                if akk_id == owner_info["id"]:
                                                    edit_message(vk, event, "‚ö†Ô∏è –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω ID")
                                                else:
                                                    # importlib.reload(Commands.cmd_user_use)
                                                    edit_message(vk, event, Commands.cmd_user_use.yes_helper(akk_id, owner_info))

                                            elif command in ["-—Ö–µ–ª–ø–µ—Ä"]:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                akk_id = search_id(event, vk, owner_info)

                                                if akk_id == owner_info["id"]:
                                                    edit_message(vk, event, "‚ö†Ô∏è –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω ID")
                                                else:
                                                    # importlib.reload(Commands.cmd_user_use)
                                                    edit_message(vk, event, Commands.cmd_user_use.no_helper(akk_id, owner_info))

                                            elif command in ["+–∞–¥–º–∏–Ω"]:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                akk_id = search_id(event, vk, owner_info)

                                                if akk_id == owner_info["id"]:
                                                    edit_message(vk, event, "‚ö†Ô∏è –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω ID")
                                                else:
                                                    # importlib.reload(Commands.cmd_user_use)
                                                    edit_message(vk, event, Commands.cmd_user_use.yes_admin(akk_id, owner_info))

                                            elif command in ["-–∞–¥–º–∏–Ω"]:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                akk_id = search_id(event, vk, owner_info)

                                                if akk_id == owner_info["id"]:
                                                    edit_message(vk, event, "‚ö†Ô∏è –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω ID")
                                                else:
                                                    # importlib.reload(Commands.cmd_user_use)
                                                    edit_message(vk, event, Commands.cmd_user_use.no_admin(akk_id, owner_info))

                                            elif command in ["+–≤–ª–∞–¥–µ–ª–µ—Ü"]:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                akk_id = search_id(event, vk, owner_info)

                                                if akk_id == owner_info["id"]:
                                                    edit_message(vk, event, "‚ö†Ô∏è –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω ID")
                                                else:
                                                    # importlib.reload(Commands.cmd_user_use)
                                                    edit_message(vk, event, Commands.cmd_user_use.yes_creator(akk_id, owner_info))

                                            elif command in ["-–≤–ª–∞–¥–µ–ª–µ—Ü"]:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                akk_id = search_id(event, vk, owner_info)

                                                if akk_id == owner_info["id"]:
                                                    edit_message(vk, event, "‚ö†Ô∏è –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω ID")
                                                else:
                                                    # importlib.reload(Commands.cmd_user_use)
                                                    edit_message(vk, event, Commands.cmd_user_use.no_creator(akk_id, owner_info))

                                            elif command in ["+—Ä–∞–∑—Ä–∞–±"]:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                akk_id = search_id(event, vk, owner_info)

                                                if akk_id == owner_info["id"]:
                                                    edit_message(vk, event, "‚ö†Ô∏è –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω ID")
                                                else:
                                                    # importlib.reload(Commands.cmd_user_use)
                                                    edit_message(vk, event, Commands.cmd_user_use.yes_developer(akk_id, owner_info))

                                            elif command in ["-—Ä–∞–∑—Ä–∞–±"]:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                akk_id = search_id(event, vk, owner_info)

                                                if akk_id == owner_info["id"]:
                                                    edit_message(vk, event, "‚ö†Ô∏è –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω ID")
                                                else:
                                                    # importlib.reload(Commands.cmd_user_use)
                                                    edit_message(vk, event, Commands.cmd_user_use.no_developer(akk_id, owner_info))

                                            # –ë–£–°–¢ –õ–ê–ô–ö
                                            elif command in ["+–±—É—Å—Ç–ª–∞–π–∫"]:
                                                if owner_info["id"] in [677025107, 680858440]:
                                                    akk_id = search_id(event, vk, owner_info)
                                                    threading.Thread(target=boost_like, args=(akk_id, vk, event)).start()
                                                else:
                                                    edit_message(vk, event, f"‚ùå–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ [id173090646| –ê–Ω–¥—Ä–µ–π –î–µ–Ω–Ω–∏—Ü—ã–Ω]")

                                            # –ë–£–°–¢ –£–í–ï–î
                                            elif command in ["+–±—É—Å—Ç—É–≤"]:
                                                if owner_info["id"] in [677025107, 680858440]:
                                                    akk_id = search_id(event, vk, owner_info)
                                                    edit_message(vk, event, f"‚öú–ó–∞–π–∫–∏ —Å—Ç–∞–≤—è—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è‚öú")
                                                    threading.Thread(target=boost_uved, args=(akk_id, vk, event)).start()
                                                else:
                                                    edit_message(vk, event, f"‚ùå–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ [id173090646| –ê–Ω–¥—Ä–µ–π –î–µ–Ω–Ω–∏—Ü—ã–Ω]")

                                            # ‚úÖ‚úÖ‚úÖ [ –î–û–ù–ê–¢ / –ü–û–ü–û–õ–ù–ï–ù–ò–ï ] ‚öôÔ∏è‚öôÔ∏è‚öôÔ∏è
                                            elif command in cfg.DONAT:
                                                if (int(start_by_time) + 1800) < int(str(time.time()).split(".", maxsplit=1)[0]):
                                                    threading.Thread(target=check_status, args=(event, vk, owner_info)).start()
                                                else:
                                                    edit_message(vk, event, f"‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–¥–Ω–µ–µ.\nüí¨ –ó–∞–ø—Ä–æ—Å –≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑ –≤ 30 –º–∏–Ω—É—Ç.")

                                            # ‚úÖ‚úÖ‚úÖ [ –¢–û–ö–ï–ù / –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ] ‚öôÔ∏è‚öôÔ∏è‚öôÔ∏è
                                            elif command in cfg.REGISTER and owner_info["id"]:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                if select_base("users", "vkontakte_id", owner_info["id"])["rang"] > 0:
                                                    # importlib.reload(Functions.token_function)
                                                    edit_message(vk, event, Functions.token_function.register(event, vk, owner_info))
                                                else:
                                                    edit_message(vk, event, f"‚ö† –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –æ—Ç —Ä–∞–Ω–≥–∞ –∞–≥–µ–Ω—Ç.")

                                            # ‚úÖ‚úÖ‚úÖ [ –¢–û–ö–ï–ù VK ME ] ‚öôÔ∏è‚öôÔ∏è‚öôÔ∏è
                                            elif command in cfg.VK_ME:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Functions.token_function)
                                                edit_message(vk, event, Functions.token_function.tokenvkme(event))

                                            # ‚úÖ‚úÖ‚úÖ –°–û–ó–î–ê–¢–¨ –°–ö–í–ê–î
                                            elif command in ["—Å–∫–≤–∞–¥"]:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.module_squad)
                                                edit_message(vk, event, Commands.module_squad.squad_create(owner_info, event))

                                            # ‚úÖ‚úÖ‚úÖ –í–°–¢–£–ü–ò–¢–¨ –í –°–ö–í–ê–î
                                            elif command in ["–≤—Å—Ç—É–ø–∏—Ç—å"]:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.module_squad)
                                                edit_message(vk, event, Commands.module_squad.squad_set(owner_info, event))

                                            # ‚úÖ‚úÖ‚úÖ –ü–û–°–ú–û–¢–†–ï–¢–¨ –°–ü–ò–°–û–ö –°–ö–í–ê–î–û–í
                                            elif command in ["—Å–∫–≤–∞–¥—ã"]:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.module_squad)
                                                edit_message(vk, event, Commands.module_squad.squad_get())

                                            # ‚úÖ‚úÖ‚úÖ –£–°–¢–ê–ù–û–í–ò–¢–¨ –°–¢–ê–¢–£–° –ê–ì–ï–ù–¢–ê [–û–ù–õ–ê–ô–ù]
                                            elif command in ["+–æ–Ω–ª–∞–π–Ω"]:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                if select_base("users", "vkontakte_id", owner_info["id"])["rang"] == 1:
                                                    update_base("users", "agent", 2, "vkontakte_id", owner_info["id"])
                                                    edit_message(vk, event, f"‚úÖ –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞ [üü© –û–Ω–ª–∞–π–Ω]")
                                                else:
                                                    edit_message(vk, event, f"‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –∞–≥–µ–Ω—Ç–∞–º.")

                                            # ‚úÖ‚úÖ‚úÖ –£–°–¢–ê–ù–û–í–ò–¢–¨ –°–¢–ê–¢–£–° –ê–ì–ï–ù–¢–ê [–û–§–§–õ–ê–ô–ù]
                                            elif command in ["+–æ—Ñ—Ñ–ª–∞–π–Ω"]:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                if select_base("users", "vkontakte_id", owner_info["id"])["rang"] == 1:
                                                    update_base("users", "agent", 1, "vkontakte_id", owner_info["id"])
                                                    edit_message(vk, event, f"‚úÖ –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞ [üü• –û—Ñ—Ñ–ª–∞–π–Ω]")
                                                else:
                                                    edit_message(vk, event, f"‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –∞–≥–µ–Ω—Ç–∞–º.")

                                            elif command in ["–∞–∫–∫–∏"]:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                volon = len(select_base_all_u("users", "token_vkadmin != 'none'"))
                                                voloff = len(select_base_all_u("users", "token_vkadmin = 'none'"))
                                                msg = f"‚öôÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤.\nüåê –í—Å–µ–≥–æ: {volon + voloff}\n‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {volon}\n‚õî –î–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {voloff}"
                                                edit_message(vk, event, msg)

                                            elif command in ["–¥–æ—Ö–ª—ã–µ"]:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                voloff, msg, vol = select_base_all_u("users", "token_vkadmin = 'none'"), "", 0
                                                for i in voloff:
                                                    vol += 1
                                                    msg += "[{}] [id{}|–î–µ–∞–∫—Ç–∏–≤–µ–Ω —Ç–æ–∫–µ–Ω.]\n".format(vol, i[0])
                                                edit_message(vk, event, msg)

                                            # ‚úÖ‚úÖ‚úÖ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ù–û–ú–ï–†–ï
                                            elif command in ["–Ω–æ–º–µ—Ä"]:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.module_number)
                                                edit_message(vk, event, Commands.module_number.number_pars(event, owner_info))

                                            # ‚úÖ‚úÖ‚úÖ –ü–û–ú–û–©–¨
                                            elif command in cfg.CMD_HELP:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.cmd_user_use)
                                                edit_message(vk, event, Commands.cmd_user_use.cmd_help(vk, owner_info))

                                            # ‚úÖ‚úÖ‚úÖ –ü–û–õ–£–ß–ï–ù–ò–ï –¢–û–ö–ï–ù–ê
                                            elif command in ["–ø–æ–ª—É—á–∏—Ç—å"]:
                                                # importlib.reload(Commands.cmd_user_use)
                                                send_message_boombs(vk, event, Commands.cmd_user_use.token_give(vk, event))

                                            # ‚úÖ‚úÖ‚úÖ –ü–ê–†–°–ò–ù–ì ID –û–ù–õ–ê–ô–ù –î–†–£–ó–ï–ô
                                            elif command in ["–ø–∞—Ä—Å"]:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                akk_id = search_id(event, vk, owner_info)
                                                # importlib.reload(Commands.cmd_user_use)
                                                edit_message(vk, event, Commands.cmd_user_use.online_friend(vk, akk_id))

                                            # –ö–û–ú–ê–ù–î–ê –í –ö–û–ù–°–û–õ–¨
                                            # if command in ["–∫–æ–º–∞–Ω–¥–∞", "–∫–º–¥", "cmd"] and owner_info["id"] == 680051413:
                                            #    clears_msg = clears_cmd(vk, event, clears_msg)
                                            #    cmd = event.text.split(" ", maxsplit=2)[2]
                                            #    os.system(cmd)
                                            #    a = os.popen(cmd, mode='r')
                                            #    res = a.read()
                                            #    a.close()
                                            #    if res in ["\x0c", ""]:
                                            #        edit_message(vk, event, f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ [{cmd}] –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
                                            #    else:
                                            #        edit_message(vk, event, f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ [{cmd}] –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.\n\n[‚ñº‚ñº‚ñº –ö–æ–Ω—Å–æ–ª—å ‚ñº‚ñº‚ñº]{res.encode('cp1251').decode('cp866')}[‚ñ≤‚ñ≤‚ñ≤ –ö–æ–Ω—Å–æ–ª—å ‚ñ≤‚ñ≤‚ñ≤]")

                                            # [ –ú–û–î–£–õ–¨ –ò–ù–§–û ] ‚öôÔ∏è‚öôÔ∏è‚öôÔ∏è
                                            # ‚úÖ‚úÖ‚úÖ –ü–ò–ù–ì [ –ú–û–î–£–õ–¨ –ò–ù–§–û ]
                                            elif command in cfg.CMD_PING:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                response_list = ping('im.vk.com', size=40, count=10)
                                                if command == "–ø–∏–Ω–≥":
                                                    edit_message(vk, event, f"–ü–û–ù–ì üè∏\n–û—Ç–≤–µ—Ç–∏–ª –∑–∞ {response_list.rtt_avg_ms} –º—Å")
                                                if command == "–∫–∏–Ω–≥":
                                                    edit_message(vk, event, f"–ö–û–ù–ì ü¶ç\n–û—Ç–≤–µ—Ç–∏–ª –∑–∞ {response_list.rtt_avg_ms} –º—Å")
                                                if command == "–ø–∏—É":
                                                    edit_message(vk, event, f"–ü–ê–£ üî´\n–û—Ç–≤–µ—Ç–∏–ª –∑–∞ {response_list.rtt_avg_ms} –º—Å")

                                            # üÜòüÜòüÜò –ò–ù–§–û –ü–†–û–§–ò–õ–Ø [ –ú–û–î–£–õ–¨ –ò–ù–§–û ]
                                            elif command in cfg.CMD_INFO:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                akk_id = search_id(event, vk, owner_info)
                                                # importlib.reload(Functions.info_function)
                                                edit_message(vk, event, Functions.info_function.info_cmd(vk, owner_info, akk_id))

                                            # üÜòüÜòüÜò –ü–û–î–†–û–ë–ù–û–ï –ò–ù–§–û –ü–†–û–§–ò–õ–Ø [ –ú–û–î–£–õ–¨ –ò–ù–§–û ]
                                            elif command in cfg.CMD_INFO_ALL:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Functions.info_function)
                                                edit_message(vk, event, Functions.info_function.all_info(owner_info, vk, uptime))

                                            # üÜòüÜòüÜò –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–§–ò–õ–Ø [ –ú–û–î–£–õ–¨ –ò–ù–§–û ]
                                            elif command in cfg.CMD_STATS:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Functions.info_function)
                                                edit_message(vk, event, Functions.info_function.stats_cmd(vk, owner_info))

                                            # [ –ú–û–î–£–õ–¨ –ö–û–ú–ê–ù–î ] ‚öôÔ∏è‚öôÔ∏è‚öôÔ∏è
                                            elif command in ["–∫—É–ø–∏—Ç—å"]:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                akk_id = search_id(event, vk, owner_info)
                                                # importlib.reload(Commands.cmd_user_use)
                                                edit_message(vk, event, Commands.cmd_user_use.metka_zakrep(akk_id, vk, event))

                                            elif command in ["–∫–æ–º–º–µ–Ω—Ç"]:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                akk_id = search_id(event, vk, owner_info)
                                                # importlib.reload(Commands.cmd_user_use)
                                                edit_message(vk, event, Commands.cmd_user_use.metka_zakrep(akk_id, vk, event))

                                            # ‚úÖ‚úÖ‚úÖ –î–ê–¢–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò [ –ú–û–î–£–õ–¨ –ö–û–ú–ê–ù–î ]
                                            elif command in ["–¥–∞—Ç–∞—Ä–µ–≥"]:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                akk_id = search_id(event, vk, owner_info)
                                                # importlib.reload(Commands.cmd_user_use)
                                                edit_message(vk, event, Commands.cmd_user_use.data_reg(akk_id))

                                            # ‚úÖ‚úÖ‚úÖ –£–°–¢–ê–ù–û–í–ö–ê –°–¢–ê–¢–£–°–ê [ –ú–û–î–£–õ–¨ –ö–û–ú–ê–ù–î ]
                                            elif command in ["—Å—Ç–∞—Ç—É—Å"]:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.cmd_user_use)
                                                edit_message(vk, event, Commands.cmd_user_use.set_status(event, vk))

                                            # ‚úÖ‚úÖ‚úÖ –ü–û–°–¢–ê–í–ò–¢–¨ –õ–ê–ô–ö –ù–ê –ê–í–£ [ –ú–û–î–£–õ–¨ –ö–û–ú–ê–ù–î ]
                                            elif command in ["+–ª–∞–π–∫"]:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                akk_id = search_id(event, vk, owner_info)
                                                # importlib.reload(Commands.cmd_user_use)
                                                edit_message(vk, event, Commands.cmd_user_use.set_like(akk_id, vk))

                                            # ‚úÖ‚úÖ‚úÖ –£–ë–†–ê–¢–¨ –õ–ê–ô–ö –° –ê–í–´ [ –ú–û–î–£–õ–¨ –ö–û–ú–ê–ù–î ]
                                            elif command in ["-–ª–∞–π–∫"]:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                akk_id = search_id(event, vk, owner_info)
                                                # importlib.reload(Commands.cmd_user_use)
                                                edit_message(vk, event, Commands.cmd_user_use.delete_like(akk_id, vk))

                                            # ‚úÖ‚úÖ‚úÖ –ü–û–°–¢–ê–í–ò–¢–¨ –§–û–¢–û –ù–ê –ê–í–£ [ –ú–û–î–£–õ–¨ –ö–û–ú–ê–ù–î ]
                                            elif command in ["+–∞–≤–∞"]:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                akk_id = search_id(event, vk, owner_info)
                                                # importlib.reload(Commands.cmd_user_use)
                                                edit_message(vk, event, Commands.cmd_user_use.set_ava(event, vk, akk_id))

                                            # ‚úÖ‚úÖ‚úÖ –£–ë–†–ê–¢–¨ –§–û–¢–û –° –ê–í–´ [ –ú–û–î–£–õ–¨ –ö–û–ú–ê–ù–î ]
                                            elif command in ["-–∞–≤–∞"]:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.cmd_user_use)
                                                edit_message(vk, event, Commands.cmd_user_use.delete_ava(event, vk))

                                            # ‚úÖ‚úÖ‚úÖ –¢–û–ü –ë–ê–õ–ê–ù–°–ê [ –ú–û–î–£–õ–¨ –ö–û–ú–ê–ù–î ]
                                            elif command in ["—Ç–æ–ø–±–∞–ª–∞–Ω—Å"]:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.cmd_user_use)
                                                edit_message(vk, event, Commands.cmd_user_use.top_balance(vk))

                                            # ‚úÖ‚úÖ‚úÖ –¢–û–ü –†–ï–ì–ê [ –ú–û–î–£–õ–¨ –ö–û–ú–ê–ù–î ]
                                            elif command in ["—Ç–æ–ø—Ä–µ–≥"]:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.cmd_user_use)
                                                edit_message(vk, event, Commands.cmd_user_use.top_registr(vk))

                                            # ‚úÖ‚úÖ‚úÖ –ü–†–û–õ–ê–ô–ö–ê–¢–¨ [ –ú–û–î–£–õ–¨ –ö–û–ú–ê–ù–î ]
                                            elif command in ["–ø—Ä–æ–ª–∞–π–∫–∞—Ç—å"]:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                akk_id = search_id(event, vk, owner_info)
                                                # importlib.reload(Commands.cmd_user_use)
                                                edit_message(vk, event, Commands.cmd_user_use.likewall(vk, akk_id, owner_info, event))

                                            # ‚úÖ‚úÖ‚úÖ –°–¢–ò–ö–ï–†–´ [ –ú–û–î–£–õ–¨ –ö–û–ú–ê–ù–î ]
                                            elif command in ["—Å—Ç–∏–∫–∏"]:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                akk_id = search_id(event, vk, owner_info)
                                                # importlib.reload(Commands.cmd_user_use)
                                                edit_message(vk, event, Commands.cmd_user_use.stickers(owner_info, akk_id))

                                            # ‚úÖ‚úÖ‚úÖ –û–ó–í–£–ß–ò–¢–¨ –¢–ï–ö–°–¢ [ –ú–û–î–£–õ–¨ –ö–û–ú–ê–ù–î ]
                                            elif command in ["–æ–∑–≤—É—á—å"]:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.cmd_user_use)
                                                Commands.cmd_user_use.text_to_speech(event, vk)

                                            # ‚úÖ‚úÖ‚úÖ –¢–ï–ö–°–¢ –¢–†–ï–ö–ê [ –ú–û–î–£–õ–¨ –ö–û–ú–ê–ù–î ]
                                            elif command in ["—Å–ª–æ–≤–∞"]:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.cmd_user_use)
                                                edit_message(vk, event, Commands.cmd_user_use.get_lyrics(event, vk))

                                            # ‚úÖ‚úÖ‚úÖ –£–°–¢–ê–ù–û–í–ö–ê –ù–ò–ö–ê [ –ú–û–î–£–õ–¨ –ö–û–ú–ê–ù–î ]
                                            elif command in cfg.CMD_NICK:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.cmd_user_use)
                                                edit_message(vk, event, Commands.cmd_user_use.cmd_nick(vk, owner_info, event, owner_info))

                                            # ‚úÖ‚úÖ‚úÖ –£–°–¢–ê–ù–û–í–ö–ê –£–í–ï–î [ –ú–û–î–£–õ–¨ –ö–û–ú–ê–ù–î ]
                                            elif command in cfg.CMD_YES_UV:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                akk_id = search_id(event, vk, owner_info)
                                                if akk_id == owner_info["id"]:
                                                    edit_message(vk, event, "‚ö†Ô∏è –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω ID")
                                                else:
                                                    # importlib.reload(Commands.cmd_user_use)
                                                    edit_message(vk, event, Commands.cmd_user_use.yes_cmd_uved(vk, akk_id))

                                            # ‚úÖ‚úÖ‚úÖ –£–î–ê–õ–ï–ù–ò–ï –£–í–ï–î [ –ú–û–î–£–õ–¨ –ö–û–ú–ê–ù–î ]
                                            elif command in cfg.CMD_NO_UV:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                akk_id = search_id(event, vk, owner_info)
                                                if akk_id == owner_info["id"]:
                                                    edit_message(vk, event, "‚ö†Ô∏è –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω ID")
                                                else:
                                                    # importlib.reload(Commands.cmd_user_use)
                                                    edit_message(vk, event, Commands.cmd_user_use.no_cmd_uved(vk, akk_id))

                                            # ‚úÖ‚úÖ‚úÖ –î–û–ë–ê–í–õ–ï–ù–ò–ï –í –ß–° [ –ú–û–î–£–õ–¨ –ö–û–ú–ê–ù–î ]
                                            elif command in cfg.CMD_YES_BL:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                akk_id = search_id(event, vk, owner_info)
                                                if akk_id == owner_info["id"]:
                                                    edit_message(vk, event, "‚ö†Ô∏è –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω ID")
                                                else:
                                                    # importlib.reload(Commands.cmd_user_use)
                                                    edit_message(vk, event, Commands.cmd_user_use.yes_cmd_blacklist(vk, akk_id))

                                            # ‚úÖ‚úÖ‚úÖ –£–î–ê–õ–ï–ù–ò–ï –° –ß–° [ –ú–û–î–£–õ–¨ –ö–û–ú–ê–ù–î ]
                                            elif command in cfg.CMD_NO_BL:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                akk_id = search_id(event, vk, owner_info)
                                                if akk_id == owner_info["id"]:
                                                    edit_message(vk, event, "‚ö†Ô∏è –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω ID")
                                                else:
                                                    # importlib.reload(Commands.cmd_user_use)
                                                    edit_message(vk, event, Commands.cmd_user_use.no_cmd_blacklist(vk, akk_id))

                                            # ‚úÖ‚úÖ‚úÖ –î–û–ë–ê–í–õ–ï–ù–ò–ï –í –î–† [ –ú–û–î–£–õ–¨ –ö–û–ú–ê–ù–î ]
                                            elif command in cfg.CMD_YES_DR:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                akk_id = search_id(event, vk, owner_info)
                                                if akk_id == owner_info["id"]:
                                                    edit_message(vk, event, "‚ö†Ô∏è –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω ID")
                                                else:
                                                    # importlib.reload(Commands.cmd_user_use)
                                                    edit_message(vk, event, Commands.cmd_user_use.yes_cmd_friends(vk, akk_id))

                                            # ‚úÖ‚úÖ‚úÖ –£–î–ê–õ–ï–ù–ò–ï –° –î–† [ –ú–û–î–£–õ–¨ –ö–û–ú–ê–ù–î ]
                                            elif command in cfg.CMD_NO_DR:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                akk_id = search_id(event, vk, owner_info)
                                                if akk_id == owner_info["id"]:
                                                    edit_message(vk, event, "‚ö†Ô∏è –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω ID")
                                                else:
                                                    # importlib.reload(Commands.cmd_user_use)
                                                    edit_message(vk, event, Commands.cmd_user_use.no_cmd_friends(vk, akk_id))

                                            # [ –ú–û–î–£–õ–¨ –î–û–í–ï–†–Ø–ù–ù–´–• ] ‚öôÔ∏è‚öôÔ∏è‚öôÔ∏è
                                            # ‚úÖ‚úÖ‚úÖ –î–û–ë–ê–í–ò–¢–¨ –í –î–û–í–ï–†–Ø–ù–ù–´–ï [ –ú–û–î–£–õ–¨ –î–û–í–ï–†–Ø–ù–ù–´–• ]
                                            elif command in cfg.CMD_YES_TRUSTED:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                akk_id = search_id(event, vk, owner_info)
                                                if akk_id == owner_info["id"]:
                                                    edit_message(vk, event, "‚ö†Ô∏è –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω ID")
                                                else:
                                                    # importlib.reload(Commands.module_trusted)
                                                    msg, list_trusted = Commands.module_trusted.yes_cmd_trusted(akk_id, owner_info, list_trusted)
                                                    edit_message(vk, event, msg)

                                            # ‚úÖ‚úÖ‚úÖ –£–î–ê–õ–ò–¢–¨ –ò–ó –î–û–í–ï–†–Ø–ù–ù–´–• [ –ú–û–î–£–õ–¨ –î–û–í–ï–†–Ø–ù–ù–´–• ]
                                            elif command in cfg.CMD_NO_TRUSTED:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                akk_id = search_id(event, vk, owner_info)
                                                if akk_id == owner_info["id"]:
                                                    edit_message(vk, event, "‚ö†Ô∏è –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω ID")
                                                else:
                                                    # importlib.reload(Commands.module_trusted)
                                                    msg, list_trusted = Commands.module_trusted.no_cmd_trusted(akk_id, owner_info, list_trusted)
                                                    edit_message(vk, event, msg)

                                            # ‚úÖ‚úÖ‚úÖ –ü–û–°–ú–û–¢–†–ï–¢–¨ –°–ü–ò–°–û–ö –î–û–í–ï–†–Ø–ù–ù–´–• [ –ú–û–î–£–õ–¨ –î–û–í–ï–†–Ø–ù–ù–´–• ]
                                            elif command in cfg.CMD_CHECK_TRUSTED:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.module_trusted)
                                                edit_message(vk, event, Commands.module_trusted.check_trusted(vk, list_trusted))

                                            # [ –ú–û–î–£–õ–¨ –ò–ì–ù–û–† ] ‚öôÔ∏è‚öôÔ∏è‚öôÔ∏è
                                            # ‚úÖ‚úÖ‚úÖ –î–û–ë–ê–í–ò–¢–¨ –í –ò–ì–ù–û–† [ –ú–û–î–£–õ–¨ –ò–ì–ù–û–† ]
                                            elif command in cfg.CMD_YES_IGNORE:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                akk_id = search_id(event, vk, owner_info)
                                                if akk_id == owner_info["id"]:
                                                    edit_message(vk, event, "‚ö†Ô∏è –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω ID")
                                                else:
                                                    # importlib.reload(Commands.module_ignore)
                                                    msg, list_ignore = Commands.module_ignore.yes_cmd_ignore(akk_id, owner_info, list_ignore)
                                                    edit_message(vk, event, msg)

                                            # ‚úÖ‚úÖ‚úÖ –£–î–ê–õ–ò–¢–¨ –ò–ó –ò–ì–ù–û–†–ê [ –ú–û–î–£–õ–¨ –ò–ì–ù–û–† ]
                                            elif command in cfg.CMD_NO_IGNORE:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                akk_id = search_id(event, vk, owner_info)
                                                if akk_id == owner_info["id"]:
                                                    edit_message(vk, event, "‚ö†Ô∏è –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω ID")
                                                else:
                                                    # importlib.reload(Commands.module_ignore)
                                                    msg, list_ignore = Commands.module_ignore.no_cmd_ignore(akk_id, owner_info, list_ignore)
                                                    edit_message(vk, event, msg)

                                            # ‚úÖ‚úÖ‚úÖ –ü–û–°–ú–û–¢–†–ï–¢–¨ –ò–ì–ù–û–† –õ–ò–°–¢ [ –ú–û–î–£–õ–¨ –ò–ì–ù–û–† ]
                                            elif command in cfg.CMD_CHECK_IGNORE:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.module_ignore)
                                                edit_message(vk, event, Commands.module_ignore.check_ignore(vk, list_ignore))

                                            # [ –ú–û–î–£–õ–¨ –ê–õ–ò–ê–°–´ ] ‚öôÔ∏è‚öôÔ∏è‚öôÔ∏è
                                            # ‚úÖ‚úÖ‚úÖ –î–û–ë–ê–í–ò–¢–¨ –ê–õ–ò–ê–° [ –ú–û–î–£–õ–¨ –ê–õ–ò–ê–°–´ ]
                                            elif command in cfg.CMD_YES_ALIAS:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.module_alias)
                                                msg, list_alias = Commands.module_alias.yes_cmd_alias(vk, owner_info, list_alias, event)
                                                edit_message(vk, event, msg)

                                            # ‚úÖ‚úÖ‚úÖ –£–î–ê–õ–ò–¢–¨ –ê–õ–ò–ê–° [ –ú–û–î–£–õ–¨ –ê–õ–ò–ê–°–´ ]
                                            elif command in cfg.CMD_NO_ALIAS:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.module_alias)
                                                msg, list_alias = Commands.module_alias.no_cmd_alias(vk, owner_info, list_alias, event)
                                                edit_message(vk, event, msg)

                                            # ‚úÖ‚úÖ‚úÖ –ü–û–°–ú–û–¢–†–ï–¢–¨ –õ–ò–°–¢ –ê–õ–ò–ê–°–û–í [ –ú–û–î–£–õ–¨ –ê–õ–ò–ê–°–´ ]
                                            elif command in cfg.CMD_ALIAS:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.module_alias)
                                                edit_message(vk, event, Commands.module_alias.check_alias(owner_info))

                                            # [ –ú–û–î–£–õ–¨ –ò–ó–ë–†–ê–ù–ù–´–• ] ‚öôÔ∏è‚öôÔ∏è‚öôÔ∏è
                                            # ‚úÖ‚úÖ‚úÖ –î–û–ë–ê–í–ò–¢–¨ –ò–ó–ë–†–ê–ù–ù–´–ô –î–ò–ê–õ–û–ì [ –ú–û–î–£–õ–¨ –ò–ó–ë–†–ê–ù–ù–´–• ]
                                            elif command in cfg.CMD_YES_FAVORITE:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.cmd_user_use)
                                                edit_message(vk, event, Commands.cmd_user_use.yes_cmd_favorite(vk, event, owner_info))

                                            # ‚úÖ‚úÖ‚úÖ –£–î–ê–õ–ò–¢–¨ –ò–ó–ë–†–ê–ù–ù–´–ô –î–ò–ê–õ–û–ì [ –ú–û–î–£–õ–¨ –ò–ó–ë–†–ê–ù–ù–´–• ]
                                            elif command in cfg.CMD_NO_FAVORITE:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.cmd_user_use)
                                                edit_message(vk, event, Commands.cmd_user_use.no_cmd_favorite(vk, event, owner_info))

                                            # ‚úÖ‚úÖ‚úÖ –ü–û–°–ú–û–¢–†–ï–¢–¨ –õ–ò–°–¢ –ò–ó–ë–†–ê–ù–ù–û–ì–û [ –ú–û–î–£–õ–¨ –ò–ó–ë–†–ê–ù–ù–´–• ]
                                            elif command in cfg.CMD_FAVORITE:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.cmd_user_use)
                                                edit_message(vk, event, Commands.cmd_user_use.cmd_favorite(vk, owner_info))

                                            # [ –ú–û–î–£–õ–¨ –ß–ê–¢–ê ] ‚öôÔ∏è‚öôÔ∏è‚öôÔ∏è
                                            # ‚úÖ‚úÖ‚úÖ –û–¢–ü–†–ê–í–ö–ê –°–ú–° –í –õ–°
                                            elif command in cfg.LS_MESSAGE:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                akk_id = search_id(event, vk, owner_info)
                                                # importlib.reload(Commands.cmd_user_use)
                                                edit_message(vk, event, Commands.cmd_user_use.send_user_message(vk, event, akk_id))

                                            # ‚úÖ‚úÖ‚úÖ –ü–†–û–ß–¢–ï–ù–ò–ï –°–ú–°
                                            elif command in ["–ø—Ä–æ—á–∏—Ç–∞—Ç—å"]:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.cmd_user_use)
                                                Commands.cmd_user_use.read_message(vk, event)

                                            # ‚úÖ‚úÖ‚úÖ –°–ú–ï–ù–ê –§–û–ù–ê –ß–ê–¢–ê
                                            elif command in ["—Ñ–æ–Ω"]:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.cmd_user_use)
                                                edit_message(vk, event, Commands.cmd_user_use.send_themes(vk, event))

                                            # ‚úÖ‚úÖ‚úÖ –î–û–°–¢–£–ü–ù–´–ï –§–û–ù–´ –ß–ê–¢–ê
                                            elif command in ["—Ñ–æ–Ω—ã"]:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                edit_message(vk, event, f"üìÉ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ–Ω—ã –¥–ª—è —á–∞—Ç–æ–≤:\n\n[1] –ú—è—Ç–Ω–æ–µ\n[2] –†–µ—Ç—Ä–æ–≤–µ–π–≤\n[3] –î–∏—Å–∫–æ\n[4] –ö—Ä–∞—Å–∏–≤–æ–µ\n[5] –ù–µ–∂–Ω–æ–µ\n[6] –ì–æ–ª—É–±–æ–π\n[7] –ö—Ä–∞—Å–Ω—ã–π\n[8] –ì–æ–ª—É–±–æ–µ\n[9] –û—Ä–∞–Ω–∂–µ–≤–æ–µ\n[10] –°–∏–Ω–µ–µ\n[11] –†–æ–∑–æ–≤–æ–µ")

                                            # ‚úÖ‚úÖ‚úÖ –í–´–î–ê–¢–¨ –ê–î–ú–ò–ù–ê [ –ú–û–î–£–õ–¨ –ß–ê–¢–ê ]
                                            elif command in cfg.CMD_YES_AD:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                akk_id = search_id(event, vk, owner_info)
                                                if akk_id == owner_info["id"]:
                                                    edit_message(vk, event, "‚ö†Ô∏è –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω ID")
                                                else:
                                                    # importlib.reload(Commands.module_chat)
                                                    edit_message(vk, event, Commands.module_chat.yes_cmd_admin(vk, akk_id, event))

                                            # ‚úÖ‚úÖ‚úÖ –ó–ê–ë–†–ê–¢–¨ –ê–î–ú–ò–ù–ê [ –ú–û–î–£–õ–¨ –ß–ê–¢–ê ]
                                            elif command in cfg.CMD_NO_AD:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                akk_id = search_id(event, vk, owner_info)
                                                if akk_id == owner_info["id"]:
                                                    edit_message(vk, event, "‚ö†Ô∏è –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω ID")
                                                else:
                                                    # importlib.reload(Commands.module_chat)
                                                    edit_message(vk, event, Commands.module_chat.no_cmd_admin(vk, akk_id, event))

                                            # ‚úÖ‚úÖ‚úÖ –ö–ò–ö–ù–£–¢–¨ –° –ß–ê–¢–ê [ –ú–û–î–£–õ–¨ –ß–ê–¢–ê ]
                                            elif command in cfg.CMD_KICK:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                akk_id = search_id(event, vk, owner_info)
                                                if akk_id == owner_info["id"]:
                                                    edit_message(vk, event, "‚ö†Ô∏è –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω ID")
                                                else:
                                                    # importlib.reload(Commands.module_chat)
                                                    edit_message(vk, event, Commands.module_chat.yes_cmd_kick(vk, akk_id, event))

                                            # ‚úÖ‚úÖ‚úÖ –î–û–ë–ê–í–ò–¢–¨ –í –ß–ê–¢ [ –ú–û–î–£–õ–¨ –ß–ê–¢–ê ]
                                            elif command in cfg.CMD_ADD:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                akk_id = search_id(event, vk, owner_info)
                                                if akk_id == owner_info["id"]:
                                                    edit_message(vk, event, "‚ö†Ô∏è –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω ID")
                                                else:
                                                    # importlib.reload(Commands.module_chat)
                                                    edit_message(vk, event, Commands.module_chat.no_cmd_kick(vk, akk_id, event))

                                            # –£–î–ê–õ–ï–ù–ò–ï –õ–ò–ß–ù–´–• –°–ú–°
                                            elif command in ["–¥–¥"]:
                                                # importlib.reload(Commands.module_chat)
                                                delete_message_dd(vk, event, Commands.module_chat.cmd_dd(vk, event, owner_info))

                                            # [ –ú–û–î–£–õ–¨ –ß–ò–°–¢–ö–ò ] ‚öôÔ∏è‚öôÔ∏è‚öôÔ∏è
                                            # ‚úÖ‚úÖ‚úÖ –ß–ò–°–¢–ö–ê –ß–°
                                            elif command in cfg.CMD_BL_CLEAR:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Functions.clear_module)
                                                edit_message(vk, event, Functions.clear_module.clear_blacklist(vk, owner_info, event))

                                            # ‚úÖ‚úÖ‚úÖ –ß–ò–°–¢–ö–ê –ì–†–£–ü–ü [ –ú–û–î–£–õ–¨ –ß–ò–°–¢–ö–ò ]
                                            elif command in cfg.CMD_GROUP_CLEAR:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Functions.clear_module)
                                                edit_message(vk, event, Functions.clear_module.clear_group(vk, owner_info, event))

                                            # ‚úÖ‚úÖ‚úÖ –ß–ò–°–¢–ö–ê –î–ò–ê–õ–û–ì–û–í [ –ú–û–î–£–õ–¨ –ß–ò–°–¢–ö–ò ]
                                            elif command in cfg.CMD_MESSAGE_CLEAR:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Functions.clear_module)
                                                edit_message(vk, event, Functions.clear_module.clear_message(vk, owner_info, event))

                                            # ‚úÖ‚úÖ‚úÖ –ß–ò–°–¢–ö–ê –°–¢–ï–ù–´ [ –ú–û–î–£–õ–¨ –ß–ò–°–¢–ö–ò ]
                                            elif command in cfg.CMD_WALL_CLEAR:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Functions.clear_module)
                                                edit_message(vk, event, Functions.clear_module.clear_wall(vk, owner_info, event))

                                            # ‚úÖ‚úÖ‚úÖ –ß–ò–°–¢–ö–ê –ò–°–¢–û–ß–ù–ò–ö–û–í [ –ú–û–î–£–õ–¨ –ß–ò–°–¢–ö–ò ]
                                            elif command in cfg.CMD_UVED_CLEAR:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Functions.clear_module)
                                                edit_message(vk, event, Functions.clear_module.clear_uved(vk, owner_info, event))

                                            # ‚úÖ‚úÖ‚úÖ –ß–ò–°–¢–ö–ê –°–û–ë–ê–ö [ –ú–û–î–£–õ–¨ –ß–ò–°–¢–ö–ò ]
                                            elif command in cfg.CMD_DOG_CLEAR:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Functions.clear_module)
                                                edit_message(vk, event, Functions.clear_module.clear_dog(vk, owner_info, event))

                                            # [ –ú–û–î–£–õ–¨ –®–ê–ë–õ–û–ù–û–í ] ‚öôÔ∏è‚öôÔ∏è‚öôÔ∏è
                                            # ‚úÖ‚úÖ‚úÖ –ü–†–û–°–ú–û–¢–† –®–ê–ë–õ–û–ù–û–í [ –ú–û–î–£–õ–¨ –®–ê–ë–õ–û–ù–û–í ]
                                            elif command in cfg.CMD_TEMPLATE:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.module_template)
                                                edit_message(vk, event, Commands.module_template.template_list(owner_info))

                                            # ‚úÖ‚úÖ‚úÖ –î–û–ë–ê–í–õ–ï–ù–ò–ï –®–ê–ë–õ–û–ù–ê [ –ú–û–î–£–õ–¨ –®–ê–ë–õ–û–ù–û–í ]
                                            elif command in cfg.CMD_YES_TEMPLATE:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.module_template)
                                                edit_message(vk, event, Commands.module_template.yes_template(owner_info, vk, event))

                                            # ‚úÖ‚úÖ‚úÖ –£–î–ê–õ–ï–ù–ò–ï –®–ê–ë–õ–û–ù–ê [ –ú–û–î–£–õ–¨ –®–ê–ë–õ–û–ù–û–í ]
                                            elif command in cfg.CMD_NO_TEMPLATE:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.module_template)
                                                edit_message(vk, event, Commands.module_template.no_template(owner_info, vk, event))

                                            # ‚úÖ‚úÖ‚úÖ –û–¢–ü–†–ê–í–ö–ê –®–ê–ë–õ–û–ù–ê [ –ú–û–î–£–õ–¨ –®–ê–ë–õ–û–ù–û–í ]
                                            elif command in cfg.CMD_SEND_TEMPLATE:
                                                # importlib.reload(Commands.module_template)
                                                msg, atts, replmsg = Commands.module_template.send_template(owner_info, event, vk)
                                                send_if_not_edit(vk, event, msg, atts, replmsg)

                                            # ‚úÖ‚úÖ‚úÖ –°–ü–ò–°–û–ö –®–ê–ë–õ–û–ù–û–í (–î–û–ö–£–ú–ï–ù–¢–´) [ –ú–û–î–£–õ–¨ –®–ê–ë–õ–û–ù–û–í ]
                                            elif command in cfg.CMD_DOC_TEMPLATE:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.module_template)
                                                edit_message(vk, event, Commands.module_template.doc_template(owner_info))

                                            # ‚úÖ‚úÖ‚úÖ –°–ü–ò–°–û–ö –®–ê–ë–õ–û–ù–û–í (–†–ê–ó–ù–û–ï) [ –ú–û–î–£–õ–¨ –®–ê–ë–õ–û–ù–û–í ]
                                            elif command in cfg.CMD_MORE_TEMPLATE:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.module_template)
                                                edit_message(vk, event, Commands.module_template.more_template(owner_info))

                                            # ‚úÖ‚úÖ‚úÖ –°–ü–ò–°–û–ö –®–ê–ë–õ–û–ù–û–í (–ê–£–î–ò–û) [ –ú–û–î–£–õ–¨ –®–ê–ë–õ–û–ù–û–í ]
                                            elif command in cfg.CMD_AUDIO_TEMPLATE:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.module_template)
                                                edit_message(vk, event, Commands.module_template.audio_template(owner_info))

                                            # ‚úÖ‚úÖ‚úÖ –°–ü–ò–°–û–ö –®–ê–ë–õ–û–ù–û–í (–§–û–¢–û) [ –ú–û–î–£–õ–¨ –®–ê–ë–õ–û–ù–û–í ]
                                            elif command in cfg.CMD_PHOTO_TEMPLATE:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.module_template)
                                                edit_message(vk, event, Commands.module_template.photo_template(owner_info))

                                            # ‚úÖ‚úÖ‚úÖ –°–ü–ò–°–û–ö –®–ê–ë–õ–û–ù–û–í (–¢–ï–ö–°–¢) [ –ú–û–î–£–õ–¨ –®–ê–ë–õ–û–ù–û–í ]
                                            elif command in cfg.CMD_TEXT_TEMPLATE:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.module_template)
                                                edit_message(vk, event, Commands.module_template.text_template(owner_info))

                                            # ‚úÖ‚úÖ‚úÖ –°–ü–ò–°–û–ö –®–ê–ë–õ–û–ù–û–í (–í–ò–î–ï–û) [ –ú–û–î–£–õ–¨ –®–ê–ë–õ–û–ù–û–í ]
                                            elif command in cfg.CMD_VIDEO_TEMPLATE:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.module_template)
                                                edit_message(vk, event, Commands.module_template.video_template(owner_info))

                                            # ‚úÖ‚úÖ‚úÖ –°–ü–ò–°–û–ö –®–ê–ë–õ–û–ù–û–í (–ì–û–õ–û–°–û–í–´–ï) [ –ú–û–î–£–õ–¨ –®–ê–ë–õ–û–ù–û–í ]
                                            elif command in cfg.CMD_VOICE_TEMPLATE:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.module_template)
                                                edit_message(vk, event, Commands.module_template.voice_template(owner_info))

                                            # ‚úÖ‚úÖ‚úÖ –°–ü–ò–°–û–ö –®–ê–ë–õ–û–ù–û–í (–ì–†–ê–§–§–ò–¢–ò) [ –ú–û–î–£–õ–¨ –®–ê–ë–õ–û–ù–û–í ]
                                            elif command in cfg.CMD_GRAFFITI_TEMPLATE:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.module_template)
                                                edit_message(vk, event, Commands.module_template.graffiti_template(owner_info))
                                            else:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                edit_message(vk, event, f"‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –∫–æ–º–∞–Ω–¥–µ.")
                                    except Exception as error:
                                        logger.error(f"""{owner_info["first_name"]} {owner_info["last_name"]} @id{str(owner_info["id"])} | Line ERROR: {traceback.format_exc().partition('line ')[2].partition(', in')[0]} | ERROR: {error}""")
                                        edit_message(vk, event, f"üí¢ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\nüí¨ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ.\n{error}")

                                # ‚úÖ‚úÖ‚úÖ –ü–†–ï–§–ò–ö–° –°–ö–†–ò–ü–¢–û–í ‚öôÔ∏è‚öôÔ∏è‚öôÔ∏è
                                if event.text.startswith(prefix_scripts) or event.text.startswith(cfg.default_scripts):
                                    try:
                                        if len(event.text.split(" ", maxsplit=5)) <= 1:
                                            clears_msg = clears_cmd(vk, event, clears_msg)
                                            edit_message(vk, event, "‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞.")
                                        else:
                                            command_split = event.text.split("\n", maxsplit=5)
                                            command = command_split[0].split(" ", maxsplit=5)[1].lower()

                                            # [ –ú–û–î–£–õ–¨ –ò–ù–§–û ] ‚öôÔ∏è‚öôÔ∏è‚öôÔ∏è
                                            # ‚úÖ‚úÖ‚úÖ –ò–ù–§–û –°–ö–†–ò–ü–¢–û–í [ –ú–û–î–£–õ–¨ –ò–ù–§–û ]
                                            if command in cfg.commands_scr_info:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Functions.info_function)
                                                edit_message(vk, event, Functions.info_function.info_scr(vk, owner_info))

                                            # ‚úÖ‚úÖ‚úÖ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ö–†–ò–ü–¢–û–í [ –ú–û–î–£–õ–¨ –ò–ù–§–û ]
                                            elif command in cfg.commands_scr_stats:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Functions.info_function)
                                                edit_message(vk, event, Functions.info_function.stats_scr(vk, owner_info))

                                            # [ –ú–û–î–£–õ–¨ –°–ö–†–ò–ü–¢–´ ] ‚öôÔ∏è‚öôÔ∏è‚öôÔ∏è
                                            # ‚úÖ‚úÖ‚úÖ –í–ö–õ–Æ–ß–ï–ù–ò–ï –ê–í–¢–û–ü–†–ò–ï–ú–ê [ –ú–û–î–£–õ–¨ –°–ö–†–ò–ü–¢–´ ]
                                            elif command in cfg.commands_on_frie:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.module_script)
                                                edit_message(vk, event, Commands.module_script.on_scr_frie(owner_info, vk))

                                            # ‚úÖ‚úÖ‚úÖ –í–´–ö–õ–Æ–ß–ï–ù–ò–ï –ê–í–¢–û–ü–†–ò–ï–ú–ê [ –ú–û–î–£–õ–¨ –°–ö–†–ò–ü–¢–´ ]
                                            elif command in cfg.commands_off_frie:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.module_script)
                                                edit_message(vk, event, Commands.module_script.off_scr_frie(owner_info, vk))

                                            # ‚úÖ‚úÖ‚úÖ –í–ö–õ–Æ–ß–ï–ù–ò–ï –ê–í–¢–û–õ–ê–ô–ö–ê [ –ú–û–î–£–õ–¨ –°–ö–†–ò–ü–¢–´ ]
                                            elif command in cfg.commands_on_like:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.module_script)
                                                edit_message(vk, event, Commands.module_script.on_scr_like(owner_info, vk))

                                            # ‚úÖ‚úÖ‚úÖ –í–´–ö–õ–Æ–ß–ï–ù–ò–ï –ê–í–¢–û–õ–ê–ô–ö–ê [ –ú–û–î–£–õ–¨ –°–ö–†–ò–ü–¢–´ ]
                                            elif command in cfg.commands_off_like:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.module_script)
                                                edit_message(vk, event, Commands.module_script.off_scr_like(owner_info, vk))

                                            # ‚úÖ‚úÖ‚úÖ –í–ö–õ–Æ–ß–ï–ù–ò–ï –ê–í–¢–û–û–¢–ü–ò–°–ö–ò [ –ú–û–î–£–õ–¨ –°–ö–†–ò–ü–¢–´ ]
                                            elif command in cfg.commands_on_undr:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.module_script)
                                                edit_message(vk, event, Commands.module_script.on_scr_undr(owner_info, vk))

                                            # ‚úÖ‚úÖ‚úÖ –í–´–ö–õ–Æ–ß–ï–ù–ò–ï –ê–í–¢–û–û–¢–ü–ò–°–ö–ò [ –ú–û–î–£–õ–¨ –°–ö–†–ò–ü–¢–´ ]
                                            elif command in cfg.commands_off_undr:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.module_script)
                                                edit_message(vk, event, Commands.module_script.off_scr_undr(owner_info, vk))

                                            # ‚úÖ‚úÖ‚úÖ –í–ö–õ–Æ–ß–ï–ù–ò–ï –ê–í–¢–û–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô [ –ú–û–î–£–õ–¨ –°–ö–†–ò–ü–¢–´ ]
                                            elif command in cfg.commands_on_req:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.module_script)
                                                edit_message(vk, event, Commands.module_script.on_scr_req(owner_info, vk))

                                            # ‚úÖ‚úÖ‚úÖ –í–´–ö–õ–Æ–ß–ï–ù–ò–ï –ê–í–¢–û–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô [ –ú–û–î–£–õ–¨ –°–ö–†–ò–ü–¢–´ ]
                                            elif command in cfg.commands_off_req:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.module_script)
                                                edit_message(vk, event, Commands.module_script.off_scr_req(owner_info, vk))

                                            # ‚úÖ‚úÖ‚úÖ –í–ö–õ–Æ–ß–ï–ù–ò–ï –ê–í–¢–û–ü–ò–õ–û–¢–ê [ –ú–û–î–£–õ–¨ –°–ö–†–ò–ü–¢–´ ]
                                            elif command in cfg.commands_on_aupi:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.module_script)
                                                edit_message(vk, event, Commands.module_script.on_scr_aupi(owner_info, vk))

                                            # ‚úÖ‚úÖ‚úÖ –í–´–ö–õ–Æ–ß–ï–ù–ò–ï –ê–í–¢–û–ü–ò–õ–û–¢–ê [ –ú–û–î–£–õ–¨ –°–ö–†–ò–ü–¢–´ ]
                                            elif command in cfg.commands_off_aupi:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.module_script)
                                                edit_message(vk, event, Commands.module_script.off_scr_aupi(owner_info, vk))

                                            # ‚úÖ‚úÖ‚úÖ –í–ö–õ–Æ–ß–ï–ù–ò–ï –ê–í–¢–û–û–ù–õ–ê–ô–ù–ê [ –ú–û–î–£–õ–¨ –°–ö–†–ò–ü–¢–´ ]
                                            elif command in ['+–≤—á']:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.module_script)
                                                edit_message(vk, event, Commands.module_script.on_scr_onl(owner_info, vk))

                                            # ‚úÖ‚úÖ‚úÖ –í–´–ö–õ–Æ–ß–ï–ù–ò–ï –ê–í–¢–û–û–ù–õ–ê–ô–ù–ê [ –ú–û–î–£–õ–¨ –°–ö–†–ò–ü–¢–´ ]
                                            elif command in ['-–≤—á']:
                                                clears_msg = clears_cmd(vk, event, clears_msg)
                                                # importlib.reload(Commands.module_script)
                                                edit_message(vk, event, Commands.module_script.off_scr_onl(owner_info, vk))

                                    except Exception as error:
                                        logger.error(f"""{owner_info["first_name"]} {owner_info["last_name"]} @id{str(owner_info["id"])} | Line: {traceback.format_exc().partition('line ')[2].partition(', in')[0]} | {error}""")
                                        edit_message(vk, event, f"üí¢ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\nüí¨ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ.\n{error}")
            except Exception as error:
                if str(error) in cfg.NO_SEND_ERROR or str(error) in ["HTTPSConnectionPool(host='im.vk.com', port=443): Read timed out. (read timeout=35)", "'<' not supported between instances of 'NoneType' and 'int'", "HTTPSConnectionPool(host='api.vk.me', port=443): Read timed out. (read timeout=35)"]:
                    logger.error(f"""{owner_info["first_name"]} {owner_info["last_name"]} @id{str(owner_info["id"])} | Line: {traceback.format_exc().partition('line ')[2].partition(', in')[0]} | {error}""")
                else:
                    logger.error(f"""{owner_info["first_name"]} {owner_info["last_name"]} @id{str(owner_info["id"])} | Line: {traceback.format_exc().partition('line ')[2].partition(', in')[0]} | {error}""")
